// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  username  String  
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 

  // relations
  orders    Order[]     @relation("CreatedOrders")
  picks     PickList[]  @relation("AssignedPicks")
  items     Item[]      @relation("CreatedItems")
}

enum Role {
  ADMIN
  USER
  PICKER
} 

model Item {
  id          String      @id @default(uuid()) @db.Uuid
  name        String
  sku         String      @unique
  description String?
  quantity    Int         @default(0) // total available
  location    String?
  createdAt   DateTime    @default(now())

  // link to user
  createdById String      @db.Uuid
  createdBy   User?       @relation("CreatedItems", fields: [createdById], references: [id], onDelete: Cascade)

  orderLines  OrderLine[]
}

model Order {
  id           String      @id @default(uuid()) @db.Uuid
  customerName String
  status       OrderStatus @default(NEW)
  createdAt    DateTime    @default(now())

  // link to user
  createdById  String      @db.Uuid
  createdBy    User?       @relation("CreatedOrders", fields: [createdById], references: [id], onDelete: Cascade)

  orderLines   OrderLine[]
  pickList     PickList?
  shipment     Shipment?
}

enum OrderStatus {
  NEW
  PICKING
  PACKED
  SHIPPED
  CANCELLED
}

model OrderLine {
  id        String   @id @default(uuid()) @db.Uuid
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String   @db.Uuid
  quantity  Int
  qtyPicked Int      @default(0)

  // link to item
  itemId    String   @db.Uuid
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

model PickList {
  id           String   @id @default(uuid()) @db.Uuid
  isComplete   Boolean  @default(false)
  createdAt    DateTime @default(now())

  // link to user
  assignedTo   User?    @relation("AssignedPicks", fields: [assignedToId], references: [id], onDelete: Cascade)
  assignedToId String?  @db.Uuid

  // link to order
  orderId      String   @unique @db.Uuid
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Shipment {
  id         String   @id @default(uuid()) @db.Uuid
  carrier    String?
  trackingId String?
  shippedAt  DateTime?

  // link to order
  orderId    String   @unique   @db.Uuid
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}