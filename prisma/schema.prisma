// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid()) @db.Uuid
  username  String  
  email String  @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 

  orders    Order[]     @relation("CreatedOrders")
  picks     PickList[]  @relation("AssignedPicks")
}

enum Role {
  ADMIN
  USER
} // Done all integrations with userModel

model Item {
  id       String   @id @default(uuid()) @db.Uuid
  name        String
  sku         String   @unique
  description String?
  quantity    Int      @default(0) // total available
  location    String?
  createdAt   DateTime @default(now())

  orderLines  OrderLine[]
}

model Order {
  id           String   @id @default(uuid()) @db.Uuid
  customerName String
  status       OrderStatus @default(NEW)
  createdAt    DateTime    @default(now())
  createdById  String      @db.Uuid
  createdBy    User?       @relation("CreatedOrders", fields: [createdById], references: [id])

  orderLines   OrderLine[]
  pickList     PickList?
  shipment     Shipment?
}

enum OrderStatus {
  NEW
  PICKING
  PACKED
  SHIPPED
  CANCELLED
}

model OrderLine {
    id           String   @id @default(uuid()) @db.Uuid
  order     Order  @relation(fields: [orderId], references: [id])
  orderId   String @db.Uuid
  item      Item   @relation(fields: [itemId], references: [id])
  itemId    String @db.Uuid
  quantity  Int
  qtyPicked Int    @default(0)
}

model PickList {
  id           String   @id @default(uuid()) @db.Uuid
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String      @unique @db.Uuid
  assignedTo User?    @relation("AssignedPicks", fields: [assignedToId], references: [id])
  assignedToId String? @db.Uuid
  isComplete Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model Shipment {
  id           String   @id @default(uuid()) @db.Uuid
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String      @unique   @db.Uuid
  carrier    String?
  trackingId String?
  shippedAt  DateTime?
}